{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { getAddresses, addAddress } from '../services/api';\nimport { toast } from 'react-toastify';\nexport const useAddresses = () => {\n  _s();\n  const [addresses, setAddresses] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchAddresses = async () => {\n    setLoading(true);\n    try {\n      const response = await getAddresses();\n      setAddresses(response.data);\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response2, _err$response2$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Ошибка загрузки адресов');\n      toast.error(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Ошибка загрузки адресов');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createAddress = async addressData => {\n    setLoading(true);\n    try {\n      const response = await addAddress(addressData);\n      setAddresses([...addresses, response.data]);\n      toast.success('Адрес успешно добавлен!');\n      return response.data;\n    } catch (err) {\n      var _err$response3, _err$response3$data, _err$response4, _err$response4$data;\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Ошибка добавления адреса');\n      toast.error(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Ошибка добавления адреса');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    addresses,\n    fetchAddresses,\n    createAddress,\n    loading,\n    error\n  };\n};\n_s(useAddresses, \"WlgwQ6mzJceDvQaREZtQH82ox6I=\");","map":{"version":3,"names":["useState","useEffect","getAddresses","addAddress","toast","useAddresses","_s","addresses","setAddresses","loading","setLoading","error","setError","fetchAddresses","response","data","err","_err$response","_err$response$data","_err$response2","_err$response2$data","message","createAddress","addressData","success","_err$response3","_err$response3$data","_err$response4","_err$response4$data"],"sources":["G:/Downloads/ZALUPA/ZALUPA/main-app/src/hooks/useAddresses.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { getAddresses, addAddress } from '../services/api';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const useAddresses = () => {\r\n  const [addresses, setAddresses] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchAddresses = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await getAddresses();\r\n      setAddresses(response.data);\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Ошибка загрузки адресов');\r\n      toast.error(err.response?.data?.message || 'Ошибка загрузки адресов');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createAddress = async (addressData) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await addAddress(addressData);\r\n      setAddresses([...addresses, response.data]);\r\n      toast.success('Адрес успешно добавлен!');\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Ошибка добавления адреса');\r\n      toast.error(err.response?.data?.message || 'Ошибка добавления адреса');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { addresses, fetchAddresses, createAddress, loading, error };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,YAAY,EAAEC,UAAU,QAAQ,iBAAiB;AAC1D,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMa,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjCH,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMZ,YAAY,CAAC,CAAC;MACrCM,YAAY,CAACM,QAAQ,CAACC,IAAI,CAAC;IAC7B,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA,EAAAC,cAAA,EAAAC,mBAAA;MACZR,QAAQ,CAAC,EAAAK,aAAA,GAAAD,GAAG,CAACF,QAAQ,cAAAG,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcF,IAAI,cAAAG,kBAAA,uBAAlBA,kBAAA,CAAoBG,OAAO,KAAI,yBAAyB,CAAC;MAClEjB,KAAK,CAACO,KAAK,CAAC,EAAAQ,cAAA,GAAAH,GAAG,CAACF,QAAQ,cAAAK,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcJ,IAAI,cAAAK,mBAAA,uBAAlBA,mBAAA,CAAoBC,OAAO,KAAI,yBAAyB,CAAC;IACvE,CAAC,SAAS;MACRX,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMY,aAAa,GAAG,MAAOC,WAAW,IAAK;IAC3Cb,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMX,UAAU,CAACoB,WAAW,CAAC;MAC9Cf,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAEO,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC3CX,KAAK,CAACoB,OAAO,CAAC,yBAAyB,CAAC;MACxC,OAAOV,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAS,cAAA,EAAAC,mBAAA,EAAAC,cAAA,EAAAC,mBAAA;MACZhB,QAAQ,CAAC,EAAAa,cAAA,GAAAT,GAAG,CAACF,QAAQ,cAAAW,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcV,IAAI,cAAAW,mBAAA,uBAAlBA,mBAAA,CAAoBL,OAAO,KAAI,0BAA0B,CAAC;MACnEjB,KAAK,CAACO,KAAK,CAAC,EAAAgB,cAAA,GAAAX,GAAG,CAACF,QAAQ,cAAAa,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcZ,IAAI,cAAAa,mBAAA,uBAAlBA,mBAAA,CAAoBP,OAAO,KAAI,0BAA0B,CAAC;MACtE,MAAML,GAAG;IACX,CAAC,SAAS;MACRN,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IAAEH,SAAS;IAAEM,cAAc;IAAES,aAAa;IAAEb,OAAO;IAAEE;EAAM,CAAC;AACrE,CAAC;AAACL,EAAA,CAnCWD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}