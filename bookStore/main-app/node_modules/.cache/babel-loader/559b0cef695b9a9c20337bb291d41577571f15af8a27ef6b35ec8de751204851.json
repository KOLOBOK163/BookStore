{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { getAddresses, addAddress } from '../services/api';\nexport const useAddresses = () => {\n  _s();\n  const [addresses, setAddresses] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchAddresses = async () => {\n    setLoading(true);\n    try {\n      const response = await getAddresses();\n      const data = response.data || response;\n      setAddresses(Array.isArray(data) ? data : []);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Ошибка загрузки адресов');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createAddress = async addressData => {\n    setLoading(true);\n    try {\n      const response = await addAddress(addressData);\n      const newAddress = response.data || response;\n      if (newAddress && newAddress.id) {\n        await fetchAddresses(); // Синхронизируем состояние с сервером\n        return newAddress;\n      } else {\n        throw new Error('Некорректный ответ от сервера');\n      }\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Ошибка создания адреса');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchAddresses();\n  }, []);\n  return {\n    addresses,\n    fetchAddresses,\n    createAddress,\n    loading,\n    error\n  };\n};\n_s(useAddresses, \"p/4mwZEougzRMiX8uiWZiIoN9SM=\");","map":{"version":3,"names":["useState","useEffect","getAddresses","addAddress","useAddresses","_s","addresses","setAddresses","loading","setLoading","error","setError","fetchAddresses","response","data","Array","isArray","err","_err$response","_err$response$data","message","console","createAddress","addressData","newAddress","id","Error","_err$response2","_err$response2$data"],"sources":["E:/ZALUPA/ZALUPA/main-app/src/hooks/useAddresses.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { getAddresses, addAddress } from '../services/api';\r\n\r\nexport const useAddresses = () => {\r\n  const [addresses, setAddresses] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchAddresses = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await getAddresses();\r\n      const data = response.data || response;\r\n      setAddresses(Array.isArray(data) ? data : []);\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Ошибка загрузки адресов');\r\n      console.error(err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createAddress = async (addressData) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await addAddress(addressData);\r\n      const newAddress = response.data || response;\r\n      if (newAddress && newAddress.id) {\r\n        await fetchAddresses(); // Синхронизируем состояние с сервером\r\n        return newAddress;\r\n      } else {\r\n        throw new Error('Некорректный ответ от сервера');\r\n      }\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Ошибка создания адреса');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAddresses();\r\n  }, []);\r\n\r\n  return { addresses, fetchAddresses, createAddress, loading, error };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,YAAY,EAAEC,UAAU,QAAQ,iBAAiB;AAE1D,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjCH,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMX,YAAY,CAAC,CAAC;MACrC,MAAMY,IAAI,GAAGD,QAAQ,CAACC,IAAI,IAAID,QAAQ;MACtCN,YAAY,CAACQ,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE,CAAC;IAC/C,CAAC,CAAC,OAAOG,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA;MACZR,QAAQ,CAAC,EAAAO,aAAA,GAAAD,GAAG,CAACJ,QAAQ,cAAAK,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcJ,IAAI,cAAAK,kBAAA,uBAAlBA,kBAAA,CAAoBC,OAAO,KAAI,yBAAyB,CAAC;MAClEC,OAAO,CAACX,KAAK,CAACO,GAAG,CAAC;IACpB,CAAC,SAAS;MACRR,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMa,aAAa,GAAG,MAAOC,WAAW,IAAK;IAC3Cd,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMV,UAAU,CAACoB,WAAW,CAAC;MAC9C,MAAMC,UAAU,GAAGX,QAAQ,CAACC,IAAI,IAAID,QAAQ;MAC5C,IAAIW,UAAU,IAAIA,UAAU,CAACC,EAAE,EAAE;QAC/B,MAAMb,cAAc,CAAC,CAAC,CAAC,CAAC;QACxB,OAAOY,UAAU;MACnB,CAAC,MAAM;QACL,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;MAClD;IACF,CAAC,CAAC,OAAOT,GAAG,EAAE;MAAA,IAAAU,cAAA,EAAAC,mBAAA;MACZjB,QAAQ,CAAC,EAAAgB,cAAA,GAAAV,GAAG,CAACJ,QAAQ,cAAAc,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcb,IAAI,cAAAc,mBAAA,uBAAlBA,mBAAA,CAAoBR,OAAO,KAAI,wBAAwB,CAAC;MACjE,MAAMH,GAAG;IACX,CAAC,SAAS;MACRR,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDR,SAAS,CAAC,MAAM;IACdW,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEN,SAAS;IAAEM,cAAc;IAAEU,aAAa;IAAEd,OAAO;IAAEE;EAAM,CAAC;AACrE,CAAC;AAACL,EAAA,CA3CWD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}