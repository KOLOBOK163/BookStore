{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { getOrders, createOrder } from '../services/api';\nexport const useOrders = () => {\n  _s();\n  const [orders, setOrders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchOrders = useCallback(async () => {\n    setLoading(true);\n    try {\n      const response = await getOrders();\n      setOrders(response.data);\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response2, _err$response3, _err$response4;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.statusText) || err.message || 'Неизвестная ошибка';\n      setError(errorMessage);\n      console.error('Fetch orders error:', {\n        status: (_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.status,\n        data: (_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : _err$response4.data,\n        message: errorMessage\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, []); // Пустой массив зависимостей, так как fetchOrders не зависит от внешних значений\n\n  const placeOrder = async orderData => {\n    setLoading(true);\n    try {\n      const response = await createOrder(orderData);\n      setOrders([...orders, response.data]);\n      return response.data;\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      setError(((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || 'Ошибка создания заказа');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return {\n    orders,\n    setOrders,\n    fetchOrders,\n    placeOrder,\n    loading,\n    error\n  };\n};\n_s(useOrders, \"R+pR13Ac49Ju9ErxeMPewntWnWo=\");","map":{"version":3,"names":["useState","useCallback","getOrders","createOrder","useOrders","_s","orders","setOrders","loading","setLoading","error","setError","fetchOrders","response","data","err","_err$response","_err$response$data","_err$response2","_err$response3","_err$response4","errorMessage","message","statusText","console","status","placeOrder","orderData","_err$response5","_err$response5$data"],"sources":["E:/ZALUPA (3)/ZALUPA/ZALUPA/main-app/src/hooks/useOrders.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { getOrders, createOrder } from '../services/api';\r\n\r\nexport const useOrders = () => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchOrders = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await getOrders();\r\n      setOrders(response.data);\r\n    } catch (err) {\r\n      const errorMessage = err.response?.data?.message || err.response?.statusText || err.message || 'Неизвестная ошибка';\r\n      setError(errorMessage);\r\n      console.error('Fetch orders error:', {\r\n        status: err.response?.status,\r\n        data: err.response?.data,\r\n        message: errorMessage,\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []); // Пустой массив зависимостей, так как fetchOrders не зависит от внешних значений\r\n\r\n  const placeOrder = async (orderData) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await createOrder(orderData);\r\n      setOrders([...orders, response.data]);\r\n      return response.data;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Ошибка создания заказа');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { orders, setOrders, fetchOrders, placeOrder, loading, error };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,SAAS,EAAEC,WAAW,QAAQ,iBAAiB;AAExD,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMY,WAAW,GAAGX,WAAW,CAAC,YAAY;IAC1CQ,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMX,SAAS,CAAC,CAAC;MAClCK,SAAS,CAACM,QAAQ,CAACC,IAAI,CAAC;IAC1B,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA,EAAAC,cAAA,EAAAC,cAAA,EAAAC,cAAA;MACZ,MAAMC,YAAY,GAAG,EAAAL,aAAA,GAAAD,GAAG,CAACF,QAAQ,cAAAG,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcF,IAAI,cAAAG,kBAAA,uBAAlBA,kBAAA,CAAoBK,OAAO,OAAAJ,cAAA,GAAIH,GAAG,CAACF,QAAQ,cAAAK,cAAA,uBAAZA,cAAA,CAAcK,UAAU,KAAIR,GAAG,CAACO,OAAO,IAAI,oBAAoB;MACnHX,QAAQ,CAACU,YAAY,CAAC;MACtBG,OAAO,CAACd,KAAK,CAAC,qBAAqB,EAAE;QACnCe,MAAM,GAAAN,cAAA,GAAEJ,GAAG,CAACF,QAAQ,cAAAM,cAAA,uBAAZA,cAAA,CAAcM,MAAM;QAC5BX,IAAI,GAAAM,cAAA,GAAEL,GAAG,CAACF,QAAQ,cAAAO,cAAA,uBAAZA,cAAA,CAAcN,IAAI;QACxBQ,OAAO,EAAED;MACX,CAAC,CAAC;IACJ,CAAC,SAAS;MACRZ,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMiB,UAAU,GAAG,MAAOC,SAAS,IAAK;IACtClB,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMV,WAAW,CAACwB,SAAS,CAAC;MAC7CpB,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAEO,QAAQ,CAACC,IAAI,CAAC,CAAC;MACrC,OAAOD,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAOC,GAAG,EAAE;MAAA,IAAAa,cAAA,EAAAC,mBAAA;MACZlB,QAAQ,CAAC,EAAAiB,cAAA,GAAAb,GAAG,CAACF,QAAQ,cAAAe,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcd,IAAI,cAAAe,mBAAA,uBAAlBA,mBAAA,CAAoBP,OAAO,KAAI,wBAAwB,CAAC;MACjE,MAAMP,GAAG;IACX,CAAC,SAAS;MACRN,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IAAEH,MAAM;IAAEC,SAAS;IAAEK,WAAW;IAAEc,UAAU;IAAElB,OAAO;IAAEE;EAAM,CAAC;AACvE,CAAC;AAACL,EAAA,CAtCWD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}