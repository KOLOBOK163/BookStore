{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { getCategories, createCategory } from '../services/api';\nimport { toast } from 'react-toastify';\nexport const useCategory = () => {\n  _s();\n  const [categories, setCategories] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const handleError = (err, defaultMessage) => {\n    var _err$response, _err$response$data;\n    const message = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || defaultMessage || 'Произошла ошибка';\n    setError(message);\n    toast.error(message);\n    setLoading(false);\n    return Promise.reject(err);\n  };\n  const fetchCategories = async () => {\n    setLoading(true);\n    try {\n      const response = await getCategories();\n      console.log('Fetch Categories Response:', response); // Отладка\n      if (response.data && Array.isArray(response.data)) {\n        setCategories(response.data);\n      } else {\n        setCategories([]); // Устанавливаем пустой массив, если данные некорректны\n        console.warn('Unexpected response format:', response);\n      }\n    } catch (err) {\n      handleError(err, 'Ошибка загрузки категорий');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createCategory = async categoryData => {\n    setLoading(true);\n    try {\n      const response = await createCategory(categoryData);\n      console.log('Create Category Response:', response); // Отладка\n      if (response.data) {\n        setCategories(prevCategories => [...prevCategories, response.data]);\n        toast.success('Категория успешно добавлена!');\n        return response.data;\n      } else {\n        throw new Error('Некорректный ответ от сервера');\n      }\n    } catch (err) {\n      handleError(err, 'Ошибка добавления категории');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchCategories();\n  }, []);\n  return {\n    categories,\n    fetchCategories,\n    createCategory,\n    loading,\n    error\n  };\n};\n_s(useCategory, \"g1A7I/nRi3rMyLRSwZ1ZdL145oQ=\");","map":{"version":3,"names":["useState","useEffect","getCategories","createCategory","toast","useCategory","_s","categories","setCategories","error","setError","loading","setLoading","handleError","err","defaultMessage","_err$response","_err$response$data","message","response","data","Promise","reject","fetchCategories","console","log","Array","isArray","warn","categoryData","prevCategories","success","Error"],"sources":["E:/ZALUPA (3)/ZALUPA/ZALUPA/main-app/src/hooks/useCategory.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { getCategories, createCategory } from '../services/api';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const useCategory = () => {\r\n  const [categories, setCategories] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleError = (err, defaultMessage) => {\r\n    const message = err.response?.data?.message || defaultMessage || 'Произошла ошибка';\r\n    setError(message);\r\n    toast.error(message);\r\n    setLoading(false);\r\n    return Promise.reject(err);\r\n  };\r\n\r\n  const fetchCategories = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await getCategories();\r\n      console.log('Fetch Categories Response:', response); // Отладка\r\n      if (response.data && Array.isArray(response.data)) {\r\n        setCategories(response.data);\r\n      } else {\r\n        setCategories([]); // Устанавливаем пустой массив, если данные некорректны\r\n        console.warn('Unexpected response format:', response);\r\n      }\r\n    } catch (err) {\r\n      handleError(err, 'Ошибка загрузки категорий');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createCategory = async (categoryData) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await createCategory(categoryData);\r\n      console.log('Create Category Response:', response); // Отладка\r\n      if (response.data) {\r\n        setCategories((prevCategories) => [...prevCategories, response.data]);\r\n        toast.success('Категория успешно добавлена!');\r\n        return response.data;\r\n      } else {\r\n        throw new Error('Некорректный ответ от сервера');\r\n      }\r\n    } catch (err) {\r\n      handleError(err, 'Ошибка добавления категории');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  return { categories, fetchCategories, createCategory, loading, error };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}