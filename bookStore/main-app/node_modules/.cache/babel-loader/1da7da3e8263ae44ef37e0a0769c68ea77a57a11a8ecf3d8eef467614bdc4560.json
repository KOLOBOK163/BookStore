{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { getAllWarehouses, createWarehouse, updateWarehouse, deleteWarehouse } from '../services/api';\nimport { toast } from 'react-toastify';\nexport const useWarehouses = () => {\n  _s();\n  const [warehouses, setWarehouses] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleError = (err, defaultMessage) => {\n    var _err$response, _err$response$data;\n    const message = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || defaultMessage;\n    setError(message);\n    toast.error(message);\n    throw err;\n  };\n  const fetchWarehouses = async () => {\n    setLoading(true);\n    try {\n      const response = await getAllWarehouses();\n      setWarehouses(Array.isArray(response) ? response : []);\n    } catch (err) {\n      handleError(err, 'Ошибка загрузки складов');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createNewWarehouse = async warehouseData => {\n    setLoading(true);\n    try {\n      const response = await createWarehouse(warehouseData);\n      setWarehouses(prev => [...prev, response]);\n      toast.success('Склад успешно создан!');\n      return response;\n    } catch (err) {\n      handleError(err, 'Ошибка создания склада');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateExistingWarehouse = async (id, warehouseData) => {\n    setLoading(true);\n    try {\n      const response = await updateWarehouse(id, warehouseData);\n      setWarehouses(prev => prev.map(warehouse => warehouse.id === id ? response : warehouse));\n      toast.success('Склад успешно обновлён!');\n      return response;\n    } catch (err) {\n      handleError(err, 'Ошибка обновления склада');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const deleteExistingWarehouse = async id => {\n    setLoading(true);\n    try {\n      await deleteWarehouse(id);\n      setWarehouses(prev => prev.filter(warehouse => warehouse.id !== id));\n      toast.success('Склад успешно удалён!');\n    } catch (err) {\n      handleError(err, 'Ошибка удаления склада');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchWarehouses();\n  }, []);\n  return {\n    warehouses,\n    fetchWarehouses,\n    createNewWarehouse,\n    updateExistingWarehouse,\n    deleteExistingWarehouse,\n    loading,\n    error\n  };\n};\n_s(useWarehouses, \"nau5dpzzVznbwXYYhZWWP3XaGcQ=\");","map":{"version":3,"names":["useState","useEffect","getAllWarehouses","createWarehouse","updateWarehouse","deleteWarehouse","toast","useWarehouses","_s","warehouses","setWarehouses","loading","setLoading","error","setError","handleError","err","defaultMessage","_err$response","_err$response$data","message","response","data","fetchWarehouses","Array","isArray","createNewWarehouse","warehouseData","prev","success","updateExistingWarehouse","id","map","warehouse","deleteExistingWarehouse","filter"],"sources":["E:/ZALUPA/ZALUPA/main-app/src/hooks/useWarehouses.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { getAllWarehouses, createWarehouse, updateWarehouse, deleteWarehouse } from '../services/api';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const useWarehouses = () => {\r\n  const [warehouses, setWarehouses] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleError = (err, defaultMessage) => {\r\n    const message = err.response?.data?.message || defaultMessage;\r\n    setError(message);\r\n    toast.error(message);\r\n    throw err;\r\n  };\r\n\r\n  const fetchWarehouses = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await getAllWarehouses();\r\n      setWarehouses(Array.isArray(response) ? response : []);\r\n    } catch (err) {\r\n      handleError(err, 'Ошибка загрузки складов');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createNewWarehouse = async (warehouseData) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await createWarehouse(warehouseData);\r\n      setWarehouses((prev) => [...prev, response]);\r\n      toast.success('Склад успешно создан!');\r\n      return response;\r\n    } catch (err) {\r\n      handleError(err, 'Ошибка создания склада');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateExistingWarehouse = async (id, warehouseData) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await updateWarehouse(id, warehouseData);\r\n      setWarehouses((prev) =>\r\n        prev.map((warehouse) => (warehouse.id === id ? response : warehouse))\r\n      );\r\n      toast.success('Склад успешно обновлён!');\r\n      return response;\r\n    } catch (err) {\r\n      handleError(err, 'Ошибка обновления склада');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteExistingWarehouse = async (id) => {\r\n    setLoading(true);\r\n    try {\r\n      await deleteWarehouse(id);\r\n      setWarehouses((prev) => prev.filter((warehouse) => warehouse.id !== id));\r\n      toast.success('Склад успешно удалён!');\r\n    } catch (err) {\r\n      handleError(err, 'Ошибка удаления склада');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchWarehouses();\r\n  }, []);\r\n\r\n  return { warehouses, fetchWarehouses, createNewWarehouse, updateExistingWarehouse, deleteExistingWarehouse, loading, error };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}